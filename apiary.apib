FORMAT: 1A
HOST: https://agenda-demo.jublia.com/api/

# Jublia Agenda

The Jublia Agenda API is used by both the Agenda Builder and Viewer components for data 
persistence. 

## Request and response format

### Requests 

All requests to the API should be encoded as JSON, with the `content-type` header 
set to `application/json`. The correct HTTP verb should also be observed. In general:

- `GET`: Obtain index or one or more records
- `POST`: Creating one or more new records
- `PUT`: Replace existing record overwriting all existing data
- `PATCH`: Update existing record without affecting unspecified fields
- `DELETE`: Delete one or more records 

`GET` and `PUT` requests can be considered by the client to be idempotent. 

#### Deletion 

All deletion on the API are hard deletes. There is no recovery or undo from the API side. 

### Responses 

All API responses are also be encoded as JSON. A 2xx status code is returned in 
the case of successful requests. 

All successful `POST` requests creating a new resource will return a `Location` header 
representing the URL of the newly created resource, and all `POST`, `PUT` and `PATCH`
requests will return the new state of the object in the body. 

Most objects also come with an `url` field that indicates the API endpoint that represents
the object.

#### Datetime format 

All date and time are returned as ISO 8601 dates. This can be parsed directly by 
[all modern browsers (IE9+)][date]. Session timing are specified using `start_at` 
relative to the first day of the event and `duration` in minutes instead to allow
for flexible handling of the event starting date. All absolute dates are in UTC. 

[date]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse#Browser_compatibility

#### Content Safety 

Unless otherwise specified, all strings returned by the API should be considered unsafe and should be 
XSS filtered by the consumer.

#### Relations 

Some endpoints return session metadata that are repeated. The API will replace these with the ID of the 
object instead. 

- Track 
- Speakers 
- Venue 
- Tag categories and tags 

### Errors 

Response with 4xx or 5xx status codes indicate something went wrong with the request. 
4xx errors indicate a problem with the request, and will carry a debugging message for 
the developer. Except for validation error in the case of 400 errors (see below), this should **not** 
be displayed to the end user. 

    {
        "error": "Record not found"
    }

#### Common error codes 

| Status Code | Name               | Common Cause                                                                                                                     |
| ----------- | ------------------ | -------------------------------------------------------------------------------------------------------------------------------- |
| 400         | Bad Request        | Request was not valid JSON, or did not pass server-side validation |
| 401         | Unauthorized       | Endpoint requires authentication (in the form of JWT token) which the request did not provide |
| 403         | Forbidden          | Token provided by the request does not have the authorization (usually only the owner of the object can edit or delete it) |
| 404         | Not Found          | The specified record was not found. Note that this can also be returned if the API route is invalid |
| 405         | Method Not Allowed | The request method (POST, PUT, DELETE etc.) is not accepted on this route |

#### Validation 

Validation errors result in a 400 Bad Request response from the API. Validation errors look like this 
(these are examples and do not correspond to actual errors):

    {
      "password": [
        "The password field is required"
      ], 
      
      "non_field_errors": [
        "The user needs to verify his email address"
      ]
    }


Validation errors consist of an object with fields as the keys and an array of errors 
in the form of strings that **can** be displayed to the user. Errors not associated with 
any field in particular appear under `non_field_errors`. 


# Group Event Organizers

This represents the authentication system for event organizers using the Builder. 

Authentication will be done using JWT. All API endpoints marked as **Authentication Required** will require 
an `Authorization` header (see: https://jwt.io/introduction/#how-do-json-web-tokens-work-). 

The sign up process is - 

1. User enters information and submits form 
2. Frontend makes request to `/users/sign_up`
3. Frontend ask user to check their email 
4. User clicks on verification link to `/users/verify/{token}`
5. User is redirected to homepage with JWT in query parameter

The password reset process is - 

1. Redirect the user to the password reset page 
2. Wait for user to do password reset 
3. Redirects user to homepage with JWT in query parameter

## POST /users/sign_up

Allow new users to sign up. After getting back a success response please prompt 
the user to visit their email to click on the verification link. After they 
have clicked on the verification link in the email, they will be redirected 
to the homepage with the JWT as a URL query parameter (see `/users/verify` below).

TODO: Include password requirements

+ Request (application/json)

    + Attributes
        + Include User
        + password (string, required)
        + event_name: JSConf.Asia (string) - The name of the event the new user is organizing. This will be turned into an agenda that the user can start working with immediately after signing up

+ Response 201 (application/json)

+ Response 422

    + Attributes (Error)

## POST /users/auth

User login using email and password. If successful a JWT will be returned 
which can be used to call endpoints that require authentication. 

+ Request (application/json)

    + Attributes 
        + username: john.doe@example.com (string, required) - the user's email
        + password (string, required)

+ Response 200 (application/json)

    + Attributes
        + token (JWT)
        + Include User

+ Response 422

    + Attributes (Error)

## POST /users/refresh

Exchange an existing token for a fresh one. The existing token must not have expired. 

+ Request (application/json)

    + Attributes
        + token (JWT)

+ Response 200 (application/json)

    + Attributes
        + token (JWT)

## POST /users/verify

Send the user another verification email. This should be called at a minimum interval of 
5 minutes since the server will not send out emails more than once every 5 minute. A
success response is returned even if the server did not send out any email because the user 
is already verified or if the request is made too soon. 

+ Request (application/json) 

    + Attributes 
        + username (string) 
    
+ Response 204

## GET /users/verify/{token}

This is not a REST API endpoint, but rather the URL sent to 
the user in the verification email. The frontend should **not** access this directly. 

After the user visits this URL they will be redirected to the root of the 
website with a JWT in the URL query parameters.

+ Parameters
    - token: cfawe03s1 (string, required)

+ Response 301

    + Attributes
        + jwt (JWT)

## GET /users/password

This is not a REST API endpoint, but rather the password reset page. You should redirect 
the user here when they ask to reset their password.

## GET /users/me

**Authentication Required.** Get profile information about the currently authenticated user. 

+ Response 200 (application/json)

    + Attributes (User Item)

## PATCH /users/me

**Authentication Required.** Updates the user's profile information. This can be 
used on the user's profile page. 

TODO: Need something different for password and email changes because both should 
result in email verification or notification for security reasons.

+ Request (application/json)

    + Attributes
        + company: Stinky Bottom's Discount Hat Emporium (string)
    
+ Response 200 (application/json)

    + Attributes (User Item) 

# Group Event Agenda

Represents the agenda of an event. The agenda object contains information regarding 
the event itself, such as start date and location, as well as the sessions - 
the things that are happening - under the events. 

Agendas are created unpublished. This allows organizers to plan out their agendas in advance. 
Once they are published the agenda becomes public and event attendees can view the agenda, 
pick sessions they want to go for and register interest in them. 

## GET /agendas

**Authentication required.** Lists all event agendas created by the user. 

+ Response 200 (application/json)

    + Attributes (array[Agenda Item])

## POST /agendas

**Authentication required.** Creates a new event agenda under the user. 

+ Request (application/json)

    + Attributes (Agenda)
        + tracks: Track A, Track B (array[string]) - An array of track names to crate on the new agenda. If no tracks are specified a default track will be assigned to the agenda. 

+ Response 201 (application/json)
    + Headers
    
            Location: /1
            
    + Attributes (Agenda Item)
        + tracks (array[Track Item])

## GET /{agenda_id}

Returns a specific event's aganda, including sessions and all other information associated with the 
agenda. This information can be used by both the agenda viewer and agenda builder. 

Unpublished agendas, and all subresources under the agenda like sessions and speakers 
require authentication to fetch. They will return 404 if no token is provided. 

+ Response 200 (application/json)

    + Attributes (Agenda Item)
    
        + sessions (array[Session Item])
        + speakers (array[Speaker Item])
        + tracks (array[Track Item])
        + session_venues (array[Venue Item])
        + categories (array[Category Item])

## GET /agendas/{slug}

This is an alias of the `/{agenda_id}` route, using slugs instead of ID. 

+ Response 200 (application/json)

    + Attributes (Agenda Item)
    
        + sessions (array[Session Item])
        + speakers (array[Speaker Item])
        + tracks (array[Track Item])
        + session_venues (array[Venue Item])
        + categories (array[Category Item])
        
## PATCH /{agenda_id}

**Authentication required.** Updates the agenda with new event information. 

+ Request (application/json)
    
    + Attribute (Agenda)

+ Response 200 (application/json)
            
    + Attributes (Agenda Item)

## DELETE /{agenda_id}

**Authentication required.** Deletes the specified agenda.

+ Response 204

## GET /{agenda_id}/data 

**Authentication required.** Retrieve agenda session popularity over time. A object will be returned 
mapping session ID to a mapping of daily cumulative number of registrations for that session over the last 
14 days. 

+ Response 200 (application/json)

    {
        "4": {
            "2016-08-09": 24, 
            "2016-08-10": 28, 
            "2016-08-11": 33, 
            "2016-08-12": 40, 
            "2016-08-13": 54,
            "2016-08-14": 60,
            "2016-08-15": 60,
            "2016-08-16": 65,
            "2016-08-17": 70,
            "2016-08-18": 72,
            "2016-08-19": 80,
            "2016-08-20": 91,
            "2016-08-21": 100,
            "2016-08-22": 102,
            "2016-08-23": 104
        }
    }

## GET /{agenda_id}/dirty

**Authentication required.** After an agenda has been published, editing a session in it will cause it 
to be marked as dirty. Calling this endpoint will retrieve a list of session IDs that have been marked. 
This is useful for keeping track of which sessions are dirty, and thus will have emails sent out to their
viewers. 

+ Response 200 (application/json)
    
    + Attributes (array[Dirty Session])
    

## POST /{agenda_id}/dirty 

**Authentication required.** After an agenda has been published, editing a session in it will cause it 
to be marked as dirty. Calling this endpoint will send out an email to **every** agenda viewer user 
who have bookmarked those sessions informing them that the session has changed. 

+ Response 200 (application/json)

    + Attributes 
        
        + sent (number) - number of emails that have been successfully sent out

# Group Event Session

A session represents something happening at a specific time at the event. 
It could be administrative, like registration or lunch, a workshop or a talk with 
one or more speakers, or even some specific timing like the submission
deadline for a hackathon. 

Sessions are always ordered by their starting time in ascending order. Session names 
can be duplicated because of repeating sessions such as 'Lunch'. 

## GET /{agenda_id}/sessions

Returns a paginated list of all sessions from a event. 

+ Response 200 (application/json)

    + Attributes (array[Session Item])

## POST /{agenda_id}/sessions

**Authentication required.** Creates a new session at an event. 

+ Request (application/json)

    + Attributes
        + Include Session
        + tags (array[number]) - an array of tag IDs that are associated with the session 

+ Response 201 (application/json)
    + Headers
    
            Location: /1/session/1
            
    + Attributes (Session Item)

## GET /{agenda_id}/sessions/{session_id}

Get information about a specific session from an event. 

+ Response 200 (application/json)

    + Attributes (Session Item)

## PUT /{agenda_id}/sessions/{session_id}

**Authentication required.**. Replace the stored session information with the 
one specified in the request. 

+ Request (application/json)

    + Attribute (Session)
        + speakers (array[number]) - one or more speakers at the session, represented by their id.
        + track (number) - the id representing the track this session is on. If not specified the first track of the event will be used.
        + tags (array[number]) - an array of tag IDs that are associated with the session 

+ Response 200 (application/json)

    + Attributes (Session Item)

## PATCH /{agenda_id}/sessions/{session_id}

**Authentication required.** Update the stored session information with the 
one specified in the request.

+ Request (application/json)

    + Attribute (Session)
        + speakers (array[number]) - one or more speakers at the session, represented by their id.
        + track (number) - the id representing the track this session is on. If not specified the first track of the event will be used.
        + tags (array[number]) - an array of tag IDs that are associated with the session 

+ Response 200 (application/json)

    + Attributes (Session Item)

## DELETE /{agenda_id}/sessions/{session_id}

**Authentication required.** Deletes the specified session.

+ Response 204

# Group Speakers 

A speaker can represent the host, speaker or guest of honor at a specific session. A session can 
have multiple speakers, and are represented as an array of IDs under the `speakers` key. 
Speaker names must be unique. 

### GET /{agenda_id}/speakers

Retrieve all speakers at an event. This can be used for a speakers listing 
or guest of honor page. 

+ Response 200 (application/json)

    + Attributes (array[Speaker Item])

### POST /{agenda_id}/speakers

**Authentication required.** Creates a new speaker to attach to the event. 

+ Request (application/json)

    + Attributes (Speaker)

+ Response 200 (application/json)

    + Headers
            
            Location: /1/speakers/1

    + Attributes (Speaker Item)

### GET /{agenda_id}/speakers/{speaker_id}

Retrieve information about a specific speaker. 

+ Response 200 (application/json)

    + Attributes (Speaker Item)
        + sessions (array[number]) - An array of ID representing the ID of the sessions the speaker appears in 


### PUT /{agenda_id}/speakers/{speaker_id}

**Authentication required.** Replace information about the specific speaker with the one in the request.

+ Request (application/json)

    + Attributes (Speaker)

+ Response 200 (application/json)

    + Attribute (Speaker Item)

### PATCH /{agenda_id}/speakers/{speaker_id} 

**Authentication required.** Same as above, except this allows for partial update. 

+ Request (application/json)

    + Attributes (Speaker)

+ Response 200 (application/json)

    + Attribute (Speaker Item)

### DELETE /{agenda_id}/speakers/{speaker_id} 

**Authentication required.** Deletes the speaker. 

+ Response 204

# Group Session Tracks 

A track represents a group of sessions. An event can have multiple tracks, possibly representing 
different locations, themes or just sets of sessions that happen at the same time. An event 
must have at least one track - the API will automatically create one on newly created event agendas, 
and reject requests to delete the last track on an agenda. 

Event tracks are represented with ID on sessions under the `track` key. Tracks must have unique names. 

### GET /{agenda_id}/tracks

Retrieves all tracks for the event. 

+ Response 200 (application/json) 

    + Attribute (array[Track Item])

### POST /{agenda_id}/tracks

**Authentication required.** Creates a new track on the agenda. 

+ Request (application/json)

    + Attribute (Track)

+ Response 201 (application/json) 

    + Attribute (Track Item)

    + Headers
    
            Location: /1/tracks/2

### GET /{agenda_id}/tracks/{track_id} 

Retrieve information about a single track and all sessions under it 

+ Response 200 (application/json) 

    + Attribute (Track Item) 
        + sessions (array[number]) - an array of ID representing the sessions on this track 

### PUT /{agenda_id}/tracks/{track_id} 

**Authentication required.** Update track information 

+ Request (application/json)

    + Attribute (Track)


### PATCH /{agenda_id}/tracks/{track_id}

**Authentication required.** Update track information 

+ Request (application/json)

    + Attribute (Track)

### DELETE /{agenda_id}/tracks/{track_id}

**Authentication required.** Delete the track. An agenda must have at least one track, 
so requesting to delete the last track will result in an error. Sessions that 
are attached to the deleted track will be moved to another track. 

+ Response 204 

# Group Session Venues

A venue represents the location a session can take place at. Venues are represented on session objects as 
ID under the `venue` key. Venues must have unique names. 

### GET /{agenda_id}/venues

Retrieves all venues for the event. 

+ Response 200 (application/json) 

    + Attribute (array[Venue Item])

### POST /{agenda_id}/venues

**Authentication required.** Creates a new venue on the agenda. 

+ Request (application/json)

    + Attribute (Venue)

+ Response 201 (application/json) 

    + Attribute (Venue Item)

    + Headers
    
            Location: /1/venues/2

### GET /{agenda_id}/venues/{venue_id} 

Retrieve information about a single venue and all sessions under it 

+ Response 200 (application/json) 

    + Attribute (Venue Item) 
        + sessions (array[number]) - an array of ID representing the sessions on this track 

### PUT /{agenda_id}/venues/{venue_id} 

**Authentication required.** Update venue information 

+ Request (application/json)

    + Attribute (Venue)

+ Response (application/json)

    + Attribute (Venue Item)

### PATCH /{agenda_id}/venues/{venue_id}

**Authentication required.** Update venue information 

+ Request (application/json)

    + Attribute (Venue)

+ Response (application/json)

    + Attribute (Venue Item)

### DELETE /{agenda_id}/venues/{venue_id}

**Authentication required.** Delete the venue. 

+ Response 204 


# Group Tags and Tag Categories 

Sessions are organized by tags, and tags are organized into categories. 
Each session can have many tags from each category attached to them. 
Viewers can than use this to filter sessions they are interested in. 
Session tags are represented on sessions as objects under the `categories` attribute: 

    "categories": {
        4: [6, 7, 8], 
        9: [10]
    }

In the example above, the session has four tags (ID 6, 7, 8 and 10) from two different categories (4 and 9). 

Here are some examples of tag categories, and the tags that can go under them:

 - Technology: JavaScript, CSS, HTML 
 - Format: Networking, Seminar, Workshop 
 - Theme: Grow & Earn, Develop, What's Next
 - Area of Interest: Advertising, Mobile Platform, Games, Internet of Things, Web Development, Virtual Reality
 

### GET /{agenda_id}/categories

Get all session tag categories for an event. This can be used to allow viewers to filter sessions by category tags.

+ Response 200 (application/json)

    + Attributes
        
        + categories (array[Category Item])


### POST /{agenda_id}/categories

**Authentication required.** Creates a new tag category for sessions, and optionally 
an array of tags to be created under it. 

+ Request (application/json)

    + Attributes (Category)
        + tags: JavaScript, HTML, CSS (array[string])

+ Response 201 (application/json)
    + Header
            
            Location: /1/categories/1
    
    + Attributes (Category Item)

### PATCH /{agenda_id}/categories/{category_id}

**Authentication required.** Update tag category. Currently this is only used for renaming.
To add, edit or remove individual tags, use the `{agenda_id}/categories/{category_id}/tags` routes. 

+ Request (application/json)

    + Attributes
        
        + name: Session Type (string)

+ Response 200 (application/json) 

    + Attributes (Category Item)

### DELETE /{agenda_id}/categories/{category_id}

**Authentication required.** Deletes the tag category, and all tags under it. 

+ Response 204

### POST /{agenda_id}/categories/{category_id}/tags

**Authentication required.** Creates a new tag under the category. 

+ Request (application/json)

    + Attributes (Tag)

+ Response 200 (application/json)
    + Header
    
            Location: /1/categories/1/tags/1

### PATCH /{agenda_id}/categories/{category_id}/tags/{tag_id}

**Authentication required.** Renames the specified tag. 

+ Request (application/json)

    + Attributes 
        
        + name: JavaScript (string)

+ Response 200 (application/json)

### DELETE /{agenda_id}/categories/{category_id}/tags/{tag_id}

**Authentication required.** Deletes the tag under the category. 

+ Response 204

# Group Image Uploads

Speakers and agendas can have images attached to them. To upload an image, send a 
multipart form request with the file attached. You will get back the URL to the uploaded file, 
which can be used as a preview to the uploaded image, and an ID, which represents the 
file and can be used in `POST`, `PUT` and `PATCH` requests in fields where an image is needed. 
Image fields in responses will always be represented as a string, the URL to the image.

## POST /uploads/image

**Authentication required.** Uploads an image so that it can be attached to an 
object later. Unattached images will be cleaned up periodically. Please note the request
content-type, which is not `application/json` unlike most other endpoints, and 
that the `file` field under request should not be sent as a string 
(which is a limitation of this documentation tool) but rather as a file attached to the request. 

+ Request (multipart/form-data)

    + Attributes
    
        + file - the image to be uploaded

+ Response 201 (application/json)

    + Attributes
        + id (number) - ID representing the image
        + file (string) - URL to the image that was just uploaded 


# Group Event Agenda Viewer 

These routes are used for event agenda viewers to create personalized agendas. 
Each viewer is identified by a unique token that is generated when they first register 
with their email. An URL to the agenda contaning the token is also sent to the user's
email when they first register as a reminder so that they can return to their 
personalized agenda. 

## POST /{agenda_id}/viewers 

Creates a new viewer. 

If the email already exists for the given email on this agenda, a 400 response is 
returned instead and an email with the token is sent to the email address. 

+ Request (application/json)

    + Attributes
        + email: john.doe@example.com (string, required)
        
+ Response 201 (application/json)

    + Attributes
        + token (string)

## GET /{agenda_id}/viewers/{token} 

Fetch all of the data associated with the token, including email and session IDs. 

+ Response 200 (application/json) 

    + Attributes
        + email (string) 
        + sessions (array[number]) - an array of session IDs that this viewer has selected 

## PUT /{agenda_id}/viewers/{token}/{session_id}

Adds a session to the list of selected sessions from this viewer. Note that the API does 
not reject registering for overlapping sessions. Repeated calls to this endpoint will 
always return 204, as `PUT` endpoints are idempotent. 

+ Response 204 

## DELETE /{agenda_id}/viewers/{token}/{session_id}

Removes the session from the list selected sessions from this viewer. Attempting 
to call this endpoint when the viewer does not have the session selected will result 
in a 404 response. 

+ Response 204 

# Group Calendar 

It is possible to get the information for entire agendas, personally agendas and 
single sessions as iCalendar (`.ics`) files. These files are widely accepted by 
most calendar applications. 

Note that all endpoints in this group returns responses with the `text/calendar` 
content-type as well as the `content-disposition` header, which means consumers 
can directly link users to this endpoint - users will automatically download 
the files when they are clicked on. 

## GET /{agenda_id}/calendar 

Get information about the entire event and all sessions in it as a calendar file.

+ Response 200 (text/calendar)

    + Header
    
            content-disposition: attachment

## GET /{agenda_id}/viewers/{token}/calendar

Get information about the event and all bookmarked sessions in it as a calendar file.

+ Response 200 (text/calendar)

    + Header
    
            content-disposition: attachment

## GET /{agenda_id}/viewers/{token}/calendar

Get information a single session a calendar file.

+ Response 200 (text/calendar)

    + Header
    
            content-disposition: attachment


## Data Structures 

### date (string)
    + Sample: `2016-09-28`

### datetime (string)
    + Sample: `2016-09-28T11:18:06+00:00`
    
### JWT (string)

### Item
+ id: 1 (number) - the ID of the object
+ url (string) - the API URL representing the object 

### Error
+ error: Invalid data (string, required) - Description of the problem for the developer. This is for debugging purpose only and may change at any time. It is not meant to be displayed to the user.

### User
+ username: john.doe@example.com (string, required) - User's email
+ company: Unhappy Cogs (string) - Name of the event organizer's company

### Agenda
+ name: SomethingConf Asia 2016 (string, required) - Name of the event
+ description: The greatest SomethingScript conference under the sun! (string) - Long description of the event 
+ location: Suntec City Hall 2A (string) - Where the event is happening
+ published: false (boolean, default) - Is the agenda publicly visible
+ icon (number) - ID of uploaded image from the upload API endpoint
+ duration: 3 (number) - Number of days the event will go on for 
+ start_at: `2016-08-22` (date) - The date on which event is starting, representing as an ISO 8601 date string 

### Session
+ name: The real story behind JS performance in mobile web and hybrid apps (string, required) - Name of the session
+ description (string) - Long description of the session
+ track: 2 (number) - The ID of the track the session is in
+ speakers: 3, 5 (array[number]) - The ID of the speakers for the session
+ venue: 3 (number) - The ID of the venue the session is held in 
+ start_at: 540 (number) - Starting time of the session in integer minutes relative to 0000 hrs on first day of the event. Cannot be below zero. 
+ duration: 60 (number) - Durating of the session in integer minutes. Should be above 0 and below 1440 (24 hours) 

### Dirty Session
+ id (number) - Session ID of the dirty session 
+ popularity (number) - Number of emails that will be sent out 

### Category
+ name: Technology (string, required)

### Tag
+ name: JavaScript (string, required)

### Speaker
+ name (string, required)
+ company (string, required)
+ position (string)
+ image (number) - ID of uploaded image from the upload API endpoint
+ email (string)
+ phone_number (string)
+ company_description (string)
+ company_url (string)

### Track
+ name (string) - the name of the track. Will be set to 'Track 1', 'Track 2', etc. if not provided. 

### Venue
+ name (string, required) - name of the venue 
+ unit (string) - unit number of the venue 

### User Item (User)
+ Include Item
+ agendas (array[Agenda Item])

### Agenda Item (Agenda)
+ Include Item
+ slug (string) - a slug of the agenda name, guaranteed to be unique
+ icon (string) - URL to an image of the icon 
+ end_at (date) - When the event is ending, computed from duration, or the session information if that is not available 

### Session Item (Session)
+ Include Item
+ popularity (number) - number of viewers who have registered for the session
+ categories (object) - a mapping of category ID to a list of tag IDs under the category
+ is_dirty (boolean) - whether the session has been edited after the agenda has been published

### Category Item (Category)
+ Include Item
+ tags (array[Tag Item])

### Tag Item (Tag)
+ Include Item

### Speaker Item (Speaker)
+ Include Item
+ image (string) - URL to an image of the speaker 

### Track Item (Track)
+ Include Item

### Venue Item (Venue)
+ Include Item