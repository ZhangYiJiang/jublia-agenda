FORMAT: 1A
HOST: http://52.220.148.170/api/

# Jublia Agenda

The Jublia Agenda API is used by both the Agenda Builder and Viewer components for data 
persistence. 

## Request and response format

### Requests 

All requests to the API should be encoded as JSON, with the `content-type` header 
set to `application/json`. The correct HTTP verb should also be observed. In general:

- `GET`: Obtain index or one or more records
- `POST`: Creating one or more new records
- `PUT`: Replace existing record overwriting all existing data
- `PATCH`: Update existing record without affecting unspecified fields
- `DELETE`: Delete one or more records 

`GET` and `PUT` requests can be considered by the client to be idempotent. 

#### Deletion 

TODO: Use Soft delete? 

### Responses 

All API responses are also be encoded as JSON. A 2xx status code is returned in 
the case of successful requests. 

All successful `POST` requests creating a new resource will return a `Location` header 
representing the URL of the newly created resource, and all `POST`, `PUT` and `PATCH`
requests will return the new state of the object in the body. 

#### Datetime format 

All date and time are returned as ISO 8601 dates. This can be parsed directly by 
[all modern browsers (IE9+)][date]. Session timing are specified using `start_at` 
relative to the first day of the event and `duration` in minutes instead to allow
for flexible handling of the event starting date. 


[date]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse#Browser_compatibility

#### Content Safety 

Unless otherwise specified, all strings returned by the API should be considered unsafe and should be 
XSS filtered by the consumer.

### Errors 

Response with 4xx or 5xx status codes indicate something went 
wrong with the request. 4xx errors indicate a problem with the request, 
and will carry a debugging message for the developer. This should 
**not** be displayed to the end user. 

    {
        "error": "Record not found"
    }

#### Common error codes 

| Status Code | Name               | Common Cause                                                                                                                     |
| ----------- | ------------------ | -------------------------------------------------------------------------------------------------------------------------------- |
| 400         | Bad Request        | Request was not valid JSON, or did not pass server-side validation |
| 401         | Unauthorized       | Endpoint requires authentication (in the form of JWT token) which the request did not provide |
| 403         | Forbidden          | Token provided by the request does not have the authorization (usually only the owner of the object can edit or delete it) |
| 404         | Not Found          | The specified record was not found. Note that this can also be returned if the API route is invalid |
| 405         | Method Not Allowed | The request method (POST, PUT, DELETE etc.) is not accepted on this route |

#### Validation 

TODO - Document HTTP 400 errors and the fields where validation errors can be found

## Pagination, Filtering and Sorting

TODO - For large API requests and lists we will definitely need to support filtering and pagination

# Group Event Organizers

This represents the authentication system for event organizers using the Builder. 

Authentication will be done using JWT. All API endpoints marked as **Authentication Required** will require 
an `Authorization` header (see: https://jwt.io/introduction/#how-do-json-web-tokens-work-). 

The sign up process is - 

1. User enters information and submits form 
2. Frontend makes request to `/users/sign_up`
3. Frontend ask user to check their email **(Not Currently Implemented)** - API currently immediately returns JWT immediately
4. User clicks on verification link to `/users/verify/{token}`
5. User is redirected to homepage with JWT in query parameter

The password reset process is - 

1. Redirect the user to the password reset page 
2. Wait for user to do password reset 
3. Redirects user to homepage with JWT in query parameter

## POST /users/sign_up

Allow new users to sign up. After getting back a success response please prompt 
the user to visit their email to click on the verification link. After they 
have clicked on the verification link in the email, they will be redirected 
to the homepage with the JWT as a URL query parameter (see `/users/verify` below).

TODO: Include password requirements

+ Request

    + Attributes
        + Include User
        + password (string, required)
        + event_name: JSConf.Asia (string) - The name of the event the new user is organizing. This will be turned into an agenda that the user can start working with immediately after signing up

+ Response 201

+ Response 422

    + Attributes (Error)

## POST /users/auth

User login using email and password. If successful a JWT will be returned 
which can be used to call endpoints that require authentication. 

+ Request

    + Attributes 
        + email: john.doe@example.com (string, required)
        + password (string, required)

+ Response 200

    + Attributes
        + token (JWT)
        + Include User

+ Response 422

    + Attributes (Error)

## POST /users/refresh

Exchange an existing token for a fresh one. The existing token must not have expired. 

+ Request

    + Attributes
        + token (JWT)

+ Response 200

    + Attributes
        + token (JWT)

## GET /users/verify/{token}

This is not a REST API endpoint, but rather the URL sent to 
the user in the verification email. The frontend should **not** access this directly. 

After the user visits this URL they will be redirected to the root of the 
website with a JWT in the URL query parameters.

TODO - What should happen if the token is invalid or expired? 

+ Parameters
    - token: cfawe03s1 (string, required)

+ Response 301

    + Attributes
        + jwt (JWT)

## GET /users/password

This is not a REST API endpoint, but rather the password reset page. You should redirect 
the user here when they ask to reset their password.

## GET /users/me

**Authentication Required.** Get profile information about the currently authenticated user. 

+ Response 200 
    + Attributes (User Item)

## PATCH /users/me

**Authentication Required.** Updates the user's profile information. This can be 
used on the user's profile page. 

TODO: Need something different for password and email changes because both should 
result in email verification or notification for security reasons.

+ Request

    + Headers
    
            Authorization 

    + Attributes
        + company: Stinky Bottom's Discount Hat Emporium (string)
    
+ Response 200

    + Attributes (User Item) 

# Group Event Agenda

Represents the agenda of an event. The agenda object contains information regarding 
the event itself, such as start date and location, as well as the sessions - 
the things that are happening - under the events. 

Agendas are created unpublished. This allows organizers to plan out their agendas in advance. 
Once they are published the agenda becomes public and event attendees can view the agenda, 
pick sessions they want to go for and register interest in them. 

## GET /agendas

**Authentication required.** Lists all event agendas created by the user. 

+ Response 200

    + Attributes (Page)
        + agendas (array[Agenda Item])

## POST /agendas

**Authentication required.** Creates a new event agenda under the user. 

+ Request

    + Attributes (Agenda)

+ Response 201
    + Headers
    
            Location: /1
            
    + Attributes (Agenda Item)

## GET /{agenda_id}

Returns a specific event's aganda. This can be used by both the agenda viewer 
and agenda builder. 

+ Response 200

    + Attributes (Agenda Item)

## PATCH /{agenda_id}

**Authentication required.** Updates the agenda with new event information. 

+ Request
    
        {
            "name": "CSSConf Asia"
        }

+ Response 200
            
    + Attributes (Agenda Item)

## DELETE /{agenda_id}

**Authentication required.** Deletes the specified agenda.

+ Response 204

# Group Event Session

A session represents something happening at a specific time at the event. 
It could be administrative, like registration or lunch, a workshop or a talk with 
one or more speakers, or even some specific timing like the submission
deadline for a hackathon. 

## GET /{agenda_id}/sessions

Returns a paginated list of all sessions from a event. 

+ Response 200
    + Attributes (Page)
        + sessions (array[Session Item])

## POST /{agenda_id}/sessions

**Authentication required.** Creates a new session at an event. 

+ Request

    + Attributes
        + Include Session
        + speakers (array[number]) - one or more speakers at the session
        + categories (array[Category]) - one or more categories which the session belongs to

+ Response 201
    + Headers
    
            Location: /1/session/1
            
    + Attributes (Session Item)

## GET /{agenda_id}/sessions/{session_id}

Get information about a specific session from an event. 

+ Response 200

    + Attributes (Session)

## PUT /{agenda_id}/sessions/{session_id}

**Authentication required.**. Replace the stored session information with the 
one specified in the request. 

+ Request

    + Attribute (Session)

+ Response 200

    + Attributes (Session Item)

## PATCH /{agenda_id}/sessions/{session_id}

**Authentication required.** Update the stored session information with the 
one specified in the request.

+ Request

        {
            "name": "My Wonderful New Session Name"
        }

+ Response 200

    + Attributes (Session Item)

## DELETE /{agenda_id}/sessions/{session_id}

**Authentication required.** Deletes the specified session.

+ Response 204

# Group Session Metadata

The following are endpoints for working with the metadata that can be attached to individual sessions. 

## Session Tags and Tag Categories 

Sessions are organized by tags. A tag is simply a string that must belong to a tag category. Each
session can have many tags from each category attached to them. Viewers can than use this 
to filter sessions they are interested in. 

Examples of tag categories, and the tags that can go under them:

 - Venue: Ballroom 1, Ballroom 2, Seminar Room 1A
 - Technology Covered: JavaScript, CSS, HTML 
 - Format: Networking, Seminar, Workshop 
 

## Speakers 

A speaker can represent the host, speaker or guest of honor at a specific session. 
This information is provided by Jublia. 


### GET /{agenda_id}/categories

Get all session tag categories for an event. This can be used to allow viewers to filter sessions by category tags.

+ Response 200

    + Attributes
        
        + categories (array[Category Item])


### POST /{agenda_id}/categories

**Authentication required.** Creates a new tag category for sessions, and optionally 
an array of tags to be created under it. 

+ Request

    + Attributes (Category)
        + tags: JavaScript, HTML, CSS (array[string])

+ Response 204
    + Header
            
            Location: /1/categories/1

### PATCH /{agenda_id}/categories/{category_id}

**Authentication required.** Update tag category. Currently this is only used for renaming.

+ Request

    + Attributes
        
        + name: Session Type (string)

+ Response 204

### POST /{agenda_id}/categories/{category_id}/tags

**Authentication required.** Creates a new tag under the category. 

+ Request 

    + Attributes (Tag)

+ Response 204
    + Header
    
            Location: /1/categories/1/tags/1

### PATCH /{agenda_id}/categories/category_id/tags/{tag_id}

**Authentication required.** Renames the specified tag. 

+ Request

    + Attributes 
        
        + name: JavaScript (string)

+ Response 204

### GET /{agenda_id}/speakers

Retrieve all speakers at an event. This can be used for a speakers listing 
or guest of honor page. 

+ Response 200

    + Attributes (Page)
        + speakers (array[Speaker])

## Data Structures 

### date (string)
    + Sample: `2016-09-28`

### datetime (string)
    + Sample: `2016-09-28T11:18:06+00:00`
    
### JWT (string)

### Item
+ id: 1 (number)

### Error
+ error: "Invalid data" (string, required) - Description of the problem for the developer. This is for debugging purpose only and may change at any time. It is not meant to be displayed to the user.

### Page
+ count: 4 (number) - Number of items on this page

### User
+ email: john.doe@example.com (string, required)
+ company: Happy Cogs (string) - Name of the event organizer's company

### Agenda
+ name: JSConf Asia 2016 (string, required) - Name of the event
+ description (string) - Long description of the event 
+ location: Suntec City Hall 2A (string) - Where the event is happening
+ published: false (boolean, default) - Is the agenda publicly visible
+ start_at (date) - When the event is starting
+ end_at (date) - When the event is ending, computed from the session information. 

### Session
+ name: The real story behind JS performance in mobile web and hybrid apps (string, required) - Name of the session
+ description (string) - Long description of the session
+ start_at (number) - Starting time of the session in integer minutes relative to 0000 hrs on first day of the event
+ duration (number) - Durating of the session in integer minutes 

### Category
+ name: Technology Covered (string, required)

### Tag
+ name: JavaScript (string, required)

### Speaker
+ name (string, required)
+ company (string, required)
+ position (string, required)
+ email (string, required)
+ phone_number (string)
+ company_description (string)
+ company_url (string)

### User Item (User)
+ Include Item
+ agendas (array[Agenda Item])

### Agenda Item (Agenda)
+ Include Item
+ sessions (array[Session Item])

### Session Item (Session)
+ Include Item
+ speakers (array[Speaker Item])
+ categories (array[Category Item])

### Category Item (Category)
+ Include Item
+ tags (array[Tag Item])

### Tag Item (Tag)
+ Include Item

### Speaker Item (Speaker)
+ Include Item